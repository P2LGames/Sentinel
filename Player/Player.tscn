[gd_scene load_steps=3 format=2]

[ext_resource path="res://Player/CodeEditor/IDE.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var camera

var selectedEntities = []
var inspectedEntity

var isSelectingMultiple = false


func _ready():
	
	pass


func _process(delta):
	handle_input()


func _physics_process(delta):
	handle_mouse_inputs()


##### INPUT #####

func handle_input():

	# Show editor if escape is pressed
	if Input.is_action_just_pressed(\"ui_focus_next\"):
		if not get_ide().visible:
			get_ide().toggle_visibility()
	
	# If we want to select multiple people we can
	isSelectingMultiple = Input.is_action_pressed(\"select_multiple\")
	
	# Handle user input if not in code editor
	if not get_ide().visible:
		# Track move and rotate
		var move = 0
		var rotate = 0
		
		if Input.is_action_pressed(\"move_up\"):
			move += 1
		if Input.is_action_pressed(\"move_down\"):
			move -= 1
		if Input.is_action_pressed(\"move_left\"):
			rotate -= 1
		if Input.is_action_pressed(\"move_right\"):
			rotate += 1
		
		for entity in selectedEntities:
			if entity.has_method(\"set_input\"):
				entity.set_input(Vector2(move, rotate))


func handle_mouse_inputs():
	# Handle user mouse events
	if not get_ide().visible and Input.is_action_just_pressed(\"left_click\"):
		# Get the clicked entity
		var clickedEntity = get_clicked_entity()
		
		# See if we can select that entity
		if clickedEntity != null and clickedEntity.has_method(\"_select\"):
			# Then we left clicked on an entity, select it
			left_clicked_on_entity(clickedEntity)
		elif clickedEntity == null:
			deselect()
		
	elif Input.is_action_just_pressed(\"right_click\"):
		pass
	
	elif Input.is_action_just_pressed(\"inspect_entity\"):
		# Get the clicked entity
		var clickedEntity = get_clicked_entity()
		
		# See if we can select that entity
		if clickedEntity:
			# Then we left clicked on an entity, select it
			inspect_entity(clickedEntity)


func get_clicked_entity():
	# Get the mouse position
	var mousePosition = camera.get_global_mouse_position()
	
	# Check if anything is intersecting my mouse position
	var result = get_world_2d().get_direct_space_state().intersect_point(mousePosition, 1, [],
		Constants.NAME_TO_BIT_MASK[Constants.LAYER.UNITS])
	print(result)
	# If we intersected something
	if result:
		return result[0].collider
	else:
		return null


func deselect():
	# If we are not selecting multiple
	if not isSelectingMultiple:
		# Deselect all selected entities
		for entity in selectedEntities:
			entity._deselect()
		
		# Clear the selectedEntities
		selectedEntities.clear()


func left_clicked_on_entity(clickedEntity):
	deselect()
	
	# If we clicked on somene we had selected, and we are selecting multiple
	if clickedEntity in selectedEntities and isSelectingMultiple:
		# Deselect him
		clickedEntity._deselect()
		
		# Remove the entity from our selection
		selectedEntities.erase(clickedEntity)
	# Otherwise, select the entity
	else:
		# Call select on the entity (Highlights him)
		clickedEntity._select()
	
		# Add the entity to my list of selected entities
		selectedEntities.append(clickedEntity)


func inspect_entity(clickedEntity):
	# Get the mouse position
	var mousePosition = get_viewport().get_mouse_position()
	
	# Get the inspect UI
	var inspectUI = get_inspect_ui()
	
	# Attempt to get the inspect items from the entity we clicked on
	if clickedEntity.has_method(\"_set_inspect_items\"):
		# Remove all it's items
		for x in range(inspectUI.get_item_count()):
			inspectUI.remove_item(0)
		
		# Get the ide
		var ide = get_ide()
		
		# Get the output text edit
		var outputTextEdit = ide.get_output_text_edit()
		
		# If we already have an inspected entity
		if inspectedEntity:
			# Disconnect him from the print message in the output text
			inspectedEntity.get_node(\"Reprogrammable\").disconnect(\"message_printed\", 
					outputTextEdit, \"_on_TargetEntity_print_message\")
		
		# Set our inspectedEntity
		inspectedEntity = clickedEntity
		
		# Set the IDE target name and type
		ide.set_target_name(inspectedEntity._get_display_name())
		ide.set_target_type(inspectedEntity.get_type())
		
		# Get the output
		var output = inspectedEntity.get_node(\"Reprogrammable\").get_current_output()
		
		# Pass the current output to the text edit
		outputTextEdit.set_output(output)
		
		# Connect the new messages to the text edit
		inspectedEntity.get_node(\"Reprogrammable\").connect(\"message_printed\", outputTextEdit, \"_on_TargetEntity_print_message\")
		
		# Set the inspectUI items from the clicked entity
		clickedEntity._set_inspect_items(inspectUI)
	else:
		return
	
	# Move the UI to the mouse and pop it up
	inspectUI.rect_position = mousePosition
	inspectUI.popup()


##### GETTERS #####

func get_inspect_ui():
	return $CanvasLayer/Inspect


func get_inspected_entity():
	return inspectedEntity


func get_inspected_entity_id():
	return int(inspectedEntity.get_node(\"Reprogrammable\").entityId)


func get_ide():
	return $CanvasLayer/IDE


##### SETTERS #####

func set_inspected_entity(entity):
	inspectedEntity = entity


func set_inspected_entity_name(text: String):
	if inspectedEntity and inspectedEntity.has_method(\"_set_display_name\"):
		inspectedEntity._set_display_name(text)


##### SIGNALS #####

func _on_Inspect_id_pressed(ID):
	if ID == Constants.INSPECT_ITEMS.EDIT_CODE:
		# Show the IDE
		get_ide().toggle_visibility()
"

[node name="Player" type="Node2D"]
script = SubResource( 1 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="IDE" parent="CanvasLayer" instance=ExtResource( 1 )]

[node name="Inspect" type="PopupMenu" parent="CanvasLayer"]
margin_right = 228.0
margin_bottom = 20.0

[node name="InspectUI" type="Control" parent="CanvasLayer"]
editor/display_folded = true
visible = false
margin_right = 191.0
margin_bottom = 331.0

[node name="VBoxContainer" type="VBoxContainer" parent="CanvasLayer/InspectUI"]
margin_right = 40.0
margin_bottom = 40.0

[node name="ButtonContainer" type="Control" parent="CanvasLayer/InspectUI/VBoxContainer"]
margin_right = 120.0
rect_min_size = Vector2( 120, 0 )

[node name="Button" type="Button" parent="CanvasLayer/InspectUI/VBoxContainer/ButtonContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
text = "Edit Code"
[connection signal="id_pressed" from="CanvasLayer/Inspect" to="." method="_on_Inspect_id_pressed"]
